

Release Notes JGroups 2.10
==========================


Version: $Id: ReleaseNotes-2.10.txt,v 1.5 2010/07/12 11:29:58 belaban Exp $
Author: Bela Ban

JGroups 2.10 is API-backwards compatible with previous versions (down to 2.2.7).

Below is a summary (with links to the detailed description) of the major new features.


New features
============



Unsupported or experimental classes are now listed
--------------------------------------------------
[https://jira.jboss.org/jira/browse/JGRP-253]

All classes with an @Experimental or @Unsupported annotation are now listed in the manual at
http://www.jgroups.org/manual/html/ch02.html, chapter 2.13.



Use of factory to create sockets
--------------------------------
[https://jira.jboss.org/browse/JGRP-278]

There's now a method Protocol.setSocketFactory(SocketFactory) which allows to set a socket factory, used to create and
close datagram and TCP (client and server) sockets. The default implementation keeps track of open sockets, so
./probe.sh socks
dumps a list of open sockets.



SCOPE: concurrent delivery of messages from the same sender
-----------------------------------------------------------
[https://jira.jboss.org/browse/JGRP-822]

By default, messages from a sender P are delivered in the (FIFO) order in which P sent them (ignoring OOB messages for
now). However, sometimes it would be beneficial to deliver unrelated messages concurrently, e.g. modifications sent by P
for different HTTP sessions.

SCOPE is a new protocol, which allows a developer to define a scope for a message, and that scope is then used to
deliver messages from P concurrently.

See http://www.jgroups.org/manual/html/user-advanced.html#Scopes for details.



UNICAST2: experimental version of UNICAST based on negative acks
----------------------------------------------------------------
[https://jira.jboss.org/browse/JGRP-1140]

By not sending acks for received messages, we can cut down on the number of acks. UNICAST2 is ca 20-30% faster than
UNICAST as a result. Needs more testing though, currently UNICAST2 is experimental.



Certain IPv4 addresses should be allowed in an IPv6 stack
---------------------------------------------------------
[https://jira.jboss.org/browse/JGRP-1152]

They will be converted into IPv6 mapped IPv4 addresses. This relaxes the (too restrictive) IP address conformance
testing somewhat, and allows for more configurations to actually start the stack and not fail with an exception.



Multiple components using the same channel
------------------------------------------
[https://jira.jboss.org/browse/JGRP-1177]

This is a new light weight version of the (old and dreaded !) Multiplexer, which allows for sharing of channels between
components, such as for example HAPartition and Infinispan.

*** Only to be used by experts ! ***




MERGE2: fast merge
------------------
[https://jira.jboss.org/browse/JGRP-1191]

Fast merge in case where we receive messages from a member which is not part of our group, but has the same
group name.



RpcDispatcher / MessageDispatcher: add exclusion list
-----------------------------------------------------
[https://jira.jboss.org/browse/JGRP-1192]

If an RPC needs to be sent to all nodes in a cluster except one node (e.g. the sender itself), then we can simply
exclude the sender. This is done using RequestOptions.setExclusionList(Address ... excluded_mbrs). This is simpler
than having to create the full list, and remove the sender.



Ability to use keywords instead of IP addresses
-----------------------------------------------
[https://jira.jboss.org/browse/JGRP-1204]

Whenever IP addresses (symbolic or dotted-decimal notation) are used, we can now use a keyword instead. Currently,
the keywords are "GLOBAL" (public IP address), "SITE_LOCAL" (private IP address), "LINK_LOCAL" (link local),
"LOOPBACK" (a loopback address) and "NON_LOOPBACK" (any but a loopback address).
This is useful in cloud environments where IP address may not be known beforehand.
Example: java -Djgroups.bind_addr=SITE_LOCAL
Example: <UDP bind_addr="GLOBAL" ... />




GossipRouter: re-introduce pinging to detect crashed clients
------------------------------------------------------------
[https://jira.jboss.org/browse/JGRP-1213]

When clients are terminated without closing of sockets (e.g. in virtualized environments), they'd cause their
entries to not be removed in GossipRouter. This was changed by (re-)introducing pinging.







Optimizations
=============


Use of IDs rather than names for headers
----------------------------------------
[https://jira.jboss.org/browse/JGRP-932]


Messages have a hashmap, where keys are strings and values headers. This is inefficient, as strings can get quite large
if someone picks a long name for a protocol. Strings were therefore changed into IDs (a short), which saves space,
both in the marshalled form (fewer bytes) and in memory. Plus, the lookup for a given protocol is probably faster, too,
as no string comparison has to be done.

This is an incompatible change for protocol developers, but it is simple to change existing protocols to use the new
scheme.



UNICAST: only the highest message is ack'ed
-------------------------------------------
[https://jira.jboss.org/browse/JGRP-1131]

This reduces the number of acks to be sent




AckReceiverWindow: make non-blocking
------------------------------------
[https://jira.jboss.org/browse/JGRP-1132]

This made UNICAST faster, too.




STREAMING_STATE_TRANSFER slow
-----------------------------
[https://jira.jboss.org/browse/JGRP-1223]

Due to incorrect use of a stream.




Bug fixes
=========

FLUSH failed on asymmetric partitions
-------------------------------------
[https://jira.jboss.org/browse/JGRP-1061]

FLUSH would fail on merging of partitions like these: A: {A,B}, B: {B}. This caused a merge to fail as well.



S3_PING / FILE_PING fixes and optimizations
--------------------------------------------
[https://jira.jboss.org/browse/JGRP-1216]: remove failed members
[https://jira.jboss.org/browse/JGRP-1218]: failure to create a bucket, but no exception thrown
[https://jira.jboss.org/browse/JGRP-1215]: ditto
[https://jira.jboss.org/browse/JGRP-1219]: create unique bucket names to avoid collisions
[https://jira.jboss.org/browse/JGRP-1217]: UUIDs instead of logical names, also to avoid collisions



Manual
======

The manual is online at http://www.jgroups.org/manual/html/index.html



The complete list of features and bug fixes can be found at http://jira.jboss.com/jira/browse/JGRP.


Bela Ban, Kreuzlingen, Switzerland
Vladimir Blagojevic, Toronto, Canada
Richard Achmatowicz, Toronto, Canada

July 2010

